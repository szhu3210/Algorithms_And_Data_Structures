To do list:
    1. Prepare technical projects: Arbitrage and BlueAir
    2. Prepare 2 stories about teamwork, behavior, personality, leadership, communication skills.
    3. https://www.youtube.com/watch?v=ibFvkG-7h38&list=PLLuMmzMTgVK7XfFadhkPuF_ztvhxbriDr

20190710

今天做了LC685的mock interview并分析。

我发现做题都必须深刻理解题意，千万不要随便开始写代码，一定要完全理解了题目意思，知道需要解决什么问题之后再想解法。

谷歌的题一定是想洋葱一样可以一步一步推导的，一定要展现出思考的过程而不是直接给出解法。理解了需要解决的问题之后便可以一步一步推导出答案。

用逻辑思考而不是靠观察法得出解法，这样的解法会比较solid且可以包含所有edge cases。

做了LC124，居然一边录制一边Google Docs上写，还做完了，而且是一遍过LC。上一次做此题还是三年前。感觉自己确实还有很大的提升的空间。

复习了variable的scope的问题：
    https://www.geeksforgeeks.org/global-local-variables-python/
        函数内读取外部变量的值时可以直接读取
        函数内对同名变量赋值时函数内的该同名变量会立即被声明为函数内的独立变量，函数内所有对该名称变量的reference均为该内部变量，与外部变量无关
        需要修改外部变量的值时可
            使用一个mutable（比如list），这样引用的时候引用的是外部变量但是却可以修改其值
            使用self.variable_name
            把函数写在class里而不是function里，使函数的定义更清晰


20190709

今天找到了一个新的学习资源：
    https://www.youtube.com/channel/UCD8yeTczadqdARzQUp29PJw

此资源面向刷题，有代码详解，可以以此为借鉴而标准化自己的代码库。

我现在这个代码库就是自己的学习成果：面试所需标准算法和数据结构资源库。所有的实现都可以标准化并在做题中复用。

今天学习并实现标准化dfs算法。


20190708

今天写ACP论文，没空刷题。


20190707

今天写ACP论文，没空刷题。


20190706

分析了LC952的录音，对比了"method of interview"，发现自己问题很多，很多地方都没有讲到。

其实写代码能力不是最重要的，表达和交流更重要。重新根据自己的面试大纲做一遍LC952。

一个一直以来忽视的刷题过程中的问题：

    现象：大量刷题过后有一个很不好的习惯，就是test driven刷题，每次都是以通过测试集为目标而刷题，因此很多细节不去深究，在遇到问题时使用提交来检查自己的idea是否正确。

    分析：由于自己依赖提交的监测系统，导致很多时候懒得细想，遇到有不对的地方就稍微改一下然后去凑答案，这是很不对的。正确的做法是仔细通过例子来检查代码正确性，提交答案后的检查仅仅作为最后正确性的验证。

    改进：在今后的练习过程中，自己人工跑代码检查正确性，每次检查完后都争取一次提交便成功，以一次成功作为目标。如果提交后有问题，要找到问题所在，重复人工检查代码的过程。确保整个算法的过程都清晰。

    另外，要加强自己写代码前的分析过程：不着急写代码，而要把算法过程先想清楚，确定下来之后再用代码实现。


20190705

今天仔细研究了谷歌的面试技巧，总结了一份面试方法论，"method of interview"。


20190704

今天做Google FooBar，没有刷题。


20190703

今天做Google FooBar，没有刷题。


20190702

今天做了别的事情，没有刷题。


20190701

1、mock interview了LC803。感觉在45分钟内做出来bug free还是很难的。
2、此题有很多边界条件要考虑，例如第一行的砖块、无效的hit、检查brick是否存在、添加了悬空的砖块等。


20190630

上午做了LC周赛，第二题没做完就被叫去送我爸去了。不管它了，下下周再做。今天研究LC803。

1、对于union find的标准客户端，增加了size的内容，可以随时查询一个component的size。
2、union find算法只能不断增加edge，不能减少edge。
3、对于减少edge的问题，可以采用逆向思维，reverse减少edge的步骤，便可以快速解答。
4、需要复习bit manipulation的相关知识，以后再研究之。


20190629

1、标准化了union find算法，形成了一个标准客户端以供以后使用。
2、仔细研究了LC952，用三种方法实现，但其原型都是union find问题。
3、mock interview了LC952。
4、制定了一项提高的具体程序。
5、复习了collections.Counter的API。
6、看了花花的YouTube视频，确定了从中级到高级的提升方法，即同类型题一起刷。
7、今后要注意变量名的取名，要做到简单明了不抽象。


20190628

学习了普林斯顿算法中的union find算法，并用python实现了课程中的所有例子。
